package recfun
import recfun.Main._

object test {
  val x = pascal(0,2)                             //> java.lang.NoClassDefFoundError: recfun/Main$
                                                  //| 	at recfun.test$$anonfun$main$1.apply$mcV$sp(recfun.test.scala:5)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$$anonfun$$exe
                                                  //| cute$1.apply$mcV$sp(WorksheetSupport.scala:76)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W
                                                  //| orksheetSupport.scala:65)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor
                                                  //| ksheetSupport.scala:75)
                                                  //| 	at recfun.test$.main(recfun.test.scala:4)
                                                  //| 	at recfun.test.main(recfun.test.scala)
                                                  //| Caused by: java.lang.ClassNotFoundException: recfun.Main$
                                                  //| 	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
                                                  //| 	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
                                                  //| 	at java.security.AccessController.doPrivileged(Native Method)
                                                  //| 	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
                                                  //| 	at java.lang.ClassLoader.loadClass(ClassLoader.java:423)
                                                  //| 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:30
                                                  //| Output exceeds cutoff limit.
  val y = pascal(1,2)
  val z = pascal(1,3)
  
  // Exercise 2
  val s1 = "(if (zero? x) max (/ 1 x))".toList
  val s2 = "()".toList
  val s3 = "I told him (that it's not (yet) done). (But he wasn't listening)".toList
  val s4 = ":-)".toList
  val s5 = "())(".toList
  
  val r1 = balance(s1)
  val r2 = balance(s2)
  val r3 = balance(s3)
  val r4 = balance(s4)
  val r5 = balance(s5)
  
  val c1 = List(1,2).size
}